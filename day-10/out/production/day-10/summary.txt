Collection Framework(CF, 컬렉션 프레임워크)
 - Collection : 데이터 처리용 여러 객체를 모아 놓은 것(최상위 인터페이스)
 - Framework : 정형화된 프로그래밍 도구 = 라이브러리
  java.util 패키지 소속 클래스 및 인터페이스 집합

핵심 인터페이스
1. List : 순서가 있는 객체의 집합을 정의하기 위한 인터페이스
    순서로 구별이 되기 때문에 중복을 허용한다.
    구현 클래스 - ArrayList, LinkedList, Stack, Vector, Queue 등.
2. Set : 순서가 없이 모아놓은 객체의 집합을 정의하기 위한 인터페이스
    중복을 허용하지 않음(마지막 입력값으로 덮어씀)
    구현 클래스 - HashSet, TreeSet 등
3. Map : 키(key)와 값(value)의 쌍으로 구성되는 데이터 집합을 정의하기 위한 인터페이스(사전 형태)
    키는 중복을 허용하지 않으나, 값은 중복을 허용한다.
    구현 클래스 - HashMap, TreeMap, HashTable, Properties 등.

예) ArrayList<String> strArry = new ArrayList<>();
   ArrayList<Integer> intArry = new ArrayList<>();
   ArrayList<Object> objArry = new ArrayList<>();

제네릭스(Generics)
    클래스 코드 작성 시 자료형을 지정하지 않고, 컴파일(클래스 사용)시 자료형을 체크하여
    지정하는 기능

    장점 : 객체 자료형의 안정성을 높이고, 형 변환의 번거로움을 줄임

각 인터페이스별 핵심 클래스(보편적으로 많이 사용하는 클래스)
1. ArrayList - 배열 형식으로 저장하는 객체 목록 클래스
    순서가 존재, 중복된 객체 저장 가능.
2. HashSet - 해시 코드를 사용하여 객체를 배치. 순서가 없음.
    중복된 객체 저장 불가. 순차적으로 사용해야 할 경우 iterator 구조체로 변환
    저장할 객체에 equals 메소드를 재정의(override)해야 함
    equals 메소드 : Object 클래스의 추상 메소드.
    String에서는 equals로 문자열의 실제 값을 비교하는데 사용.
3. HashMap - 해시 코드를 사용하여 객체를 배치
    키(숫자나 문자열)와 값(객체)의 쌍으로 객체를 저장

Iterator 인터페이스
    Collection의 순차적인 접근 방법을 제공하는 인터페이스.
    Set의 경우 비순차적으로 저장하기 때문에 Iterator를 활용.

    Iterator의 메소드
    1) hasNext() : 처리할 원소가 있는지 여부 확인
        처리할 원소가 있으면 true, 없으면 false(while에서 활용)
    2) next() : 해당 순번의 원소를 가져오는 메소드

    3) remove() : 가져온 원소를 삭제
