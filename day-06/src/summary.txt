객체 지향의 특성
1. 캡슐화(+ 정보 은닉)
  in Java -> class = 필드 + 메소드
  정보은닉 -> 접근 제어자.
        변수(필드)는 숨긴다.(private 사용)
        메소드는 공개한다.(public 사용)

  제어자
  1) 접근 제어자 - public, protected, default, private
  2) 기타 제어자 - static, final

  static - 인스턴스 없이 사용 가능한 필드나 메소드.
  static이 붙은 필드(클래스 변수)
    - 모든 인스턴스 공유하는 공간.
      모든 인스턴스에 같은 값이 적용되도록 사용하는 공간.

    모든 인스턴스는 생성되면 자기만의 공간을 갖는다.
    인스턴스별로 다른 값을 저장할 때는 필드를 사용,
    모든 인스턴스가 같은 값을 저장할 때는 클래스변수를 사용.
    인스턴스 변수는 Heap 영역에 생성,
    클래스변수는 Method 영역에 생성.

스태틱 멤버(변수, 메소드)와 인스턴스 멤버 사용에 대한 제약
1. 인스턴스 멤버는 스태틱 멤버 메소드에서 사용 불가.
  (인스턴스 멤버는 인스턴스 메소드에서만 사용)
2. 스태틱 멤버는 모든 경우에 사용 가능.

스태틱 멤버는 private를 붙이지 않는다.
(인스턴스 없이도 사용할 수 있어야 함. 보호하기 어려운 멤버임.)

final 제어자
  마지막! (이후 변경 불가!)
  변수, 클래스, 메소드 앞에 붙일 수 있음.
  변수 앞에 붙으면 - 상수(constant). 초기화 후 값 변경 불가.
  클래스 앞에 붙으면 - 상속을 할 수 없는 클래스.
  메소드 앞에 붙으면 - 재정의가 안되는 메소드.

  상수명 작성 요령(권장)
  1. 상수명은 대문자로 작성.
  2. 스네이크 케이스를 활용.
  예) final float PI_VALUE = 3.141592f;

메소드의 다형성 : Method Overloading
    하나의 클래스에 같은 이름의 메소드를 다수 정의하는 것.
    (이름은 같은데 제공 기능이 다른 메소드들)
    조건
    1) 메소드의 이름이 같아야 한다.
    2) 매개변수의 개수 또는 자료형이 달라야 한다.
    3) 반환형은 고려하지 않는다.

    대표 예) System.out.println()

생성자(Constructor) <-> 파괴자(Destructor)는 없음!
    인스턴스가 생성될 때 호출되는 메소드.
    인스턴스를 만들 때마다 사용했었다...

    인스턴스 생성 문법>
    클래스명 인스턴스명 = new 생성자();

    생성자 특수성
    1) 클래스의 이름과 같은 이름을 갖는다!(대소문자까지)
        메소드명 중 유일하게 대문자로 시작하는 메소드.
    2) 반환하지 않는다. 그래서 반환형을 사용하지 않는다.
        (void도 사용하지 않는다.)
    3) 모든 클래스는 최소 하나의 생성자가 있어야 한다.
        (여러개의 생성자를 작성할 수도 있으나 반드시
         하나는 있어야 한다.)

    기본 생성자(Default Constructor)
        생성자 중에서 매개 변수가 없는 생성자.
        -> 컴파일러가 자동으로 작성해 줌.
           단, 아무런 생성자가 없어야 한다.
        기본 생성자 작성 문법>
            접근제어자 클래스명() { }


    생성자의 역할
      - 인스턴스를 생성할 때 딱 한번만 호출되는 특수 메소드.
      => 필드의 값을 초기화할 때 사용.

    생성자 작성 시 고려사항
      생성자는 인스턴스의 생성과 관련된 메소드기 때문에
      public으로 작성(예외 있음. singleton 패턴
      - 생성자를 통해 인스턴스 생성을 제한할 수 있음.)

참고) 필드의 초기화 방법
1) 필드 선언 시 초기화를 같이 하는 방법.
    private int a = 10;
2) 인스턴스 생성 후 setter 메소드로 값을 대입.
3) 생성자를 사용하여 생성 시 값을 대입.

this 란?
    인스턴스를 구별하기 위한 방법. 일종의 참조변수.
    인스턴스 자신의 주소를 스스로 저장하고 있음.
    (같은 클래스로 만들어진 인스턴스가 많기 때문에...)
  1) 필드와 지역 변수 구분을 위해 사용.
        this.color = color;
        (필드)       (지역변수)
  2) 생성자의 다른 이름 : this() 메소드.

생성자 오버로딩
    생성자를 여러개 만들 수 있다.
    생성자 안에서 다른 생성자를 호출할 때 사용.
    생성자 간에 중복된 코드 사용을 줄이는데 활용됨.

코딩에 '반드시'는 없습니다.(알고 쓰면 좋지만...)
- 생성자를 반드시 쓸 필요는 없습니다.
- 'this.필드'를 반드시 쓸 필요는 없습니다.
- this() 메소드를 반드시 쓸 필요는 없습니다.
- 메소드 오버로딩을 반드시 쓸 필요는 없습니다.
- 디자인 패턴도 반드시 쓸 필요는 없습니다.
예외는 있습니다.. (^^;;) - 반드시 해야 할 것도 있더군요...

주소록(연락처) 프로그램 구현
프로그램 골격, InOutClass, MVC 패턴

데이터의 구조.
- 이름(검색대상), 연락처, 주소, 생일정보, 차단유무

메뉴
1. 연락처 입력
2. 연락처 출력(전체 출력)
3. 연락처 검색(개별 출력)
    3.1 이름
    3.2 연락처
    3.3 생일
4. 연락처 수정(차단)
    4.1 연락처 수정
    4.2 연락처 차단
5. 연락처 삭제
0. 종료


toString 메소드 : 특수 목적을 갖는 메소드.
    인스턴스를 출력할 때 대신 출력할 문자열을 지정하는 메소드.




