    Collection Framework
    1. Set : 비순차 구조. 중복 불가(제거). HashSet 등.
    2. List : 순차 구조. 중복 허용. ArrayList  등
    3. Map : 키와 값의 쌍으로 데이터를 묶는 구조.
        키는 중복 불가. 값은 중복 허용. HashMap 등.

    Iterator 인터페이스
        Collection의 순차적인 접근 방법을 제공하는 인터페이스
        Set의 경우 Iterator를 사용하여 순차적으로 사용.
        List에서도 안전한 삭제를 위해 사용.

        - 주요 메소드
        1) hasNext() : 다음 원소의 존재 유무 확인용 메소드.
        2) next() : 해당 순번의 원소를 가져오는 메소드.
        3) remove() : 해당 순번의 원소를 삭제하는 메소드.

    Map(HashMap)
        한번에 두 데이터를 저장.
        한 쌍으로 이루어진 데이터. 영단어 사전 - 단어 : 뜻.
        값을 키로 검색하여 사용하는 구조.

        Map<Key_Object, Value_Object > 맵이름
        - Key_Object : Integer, String 사용
        - Value-Object : 모든 객체.

        저장용 메소드 - put(key, value);
        읽어오기 메소드 - get(key); 읽어오는 값은 value.


기타 유용한 객체들
    String(문자열) 관련 메소드
        1) equals() : 두 문자열의 실제 데이터 비교.
        2) concat() : 두 문자열의 결합('+'와 같음)
        3) charAt(n) : 지정된 위치(n)의 문자(char) 가져오기.
        4) contains(str) : str이 있으면 true, 없으면 false.
        5) indexOf(str, n) : str이 있으면 시작 위치를, 없으면 -1.
                             n - 검색 시작 위치 지정(생략 시 처음부터)
        6) split(구분자) : 구분자에 따라 문자를 문자열 배열로 변환.
        7) replace(str1, str2) : 모든 str1을 str2로 변환.
        8) length() : 문자열의 길이
        9) subString(st, ed) : st부터 ed의 직전까지 문자열 추출


    StringBuffer
        문자열 임시 저장소. 문자열 내의 문자를 변경하거나 문장을 추가/삭제 등의 작업 효율성을
        높이는 보조 객체.
        1) append(str) : 버퍼에 새 문자열을 추가(뒤에 붙임)
        2) capacity() : 용량. 버퍼의 크기
        3) length() : 문자열의 길이
        4) delete(st, ed) : 지정된 범위의 문자열 삭제
        5) insert(idx, str) : 지정된 위치(idx)에 문자열(str) 삽입
        6) replace(st, ed, str) : 지정된 범위의 문자열을 str로 변경
        7) reverse() : 문자열의 순서를 역순으로 변경
        8) charAt(idx) : 지정된 위치의 문자를 가져오기.
        9) setCharAt(idx, char) : 지정된 위치에 '문자'를 변경
        10) toString() : 완성된 임시 문자열을 문자열로 고정.

        생성자로 버퍼의 크기를 지정할 수 있다.

    날짜와 시간 처리
        활용할 클래스
        java.util 패키지 : Date, Calendar
        java.text 패키지 : SimpleDateFormat

        Date Class : 인스턴스 생성 시점의 시스템 날짜와 시간을 초기값으로 저장하고
        활용할 수 있는 클래스.

        SimpleDateFormat의 날짜와 시간 표기 기호
        G : AD/BC 등 연호
        y : 연도, M : 월, d : 일, E : 요일
        a : 오전/오후, h : 시, m : 분, s : 초, S : 밀리초
        k/H : 24시간 주기 시
        w : week of year
        W : week of month
        D : day of year
        F : day of week
            1 - 1~7일까지
            2 - 8~14일까지
            3 - 15~21일까지
            4 - 22~28일까지
            5 - 나머지

    Calendar Class : 달력 클래스. Date 클래스의 보편화.
        Date 클래스보다 쓰기 쉽다.
    Singleton 패턴을 사용하는 형태.
        - 인스턴스를 하나만 사용하도록 강제하는 패턴.
          인스턴스를 사용하는 다른 클래스에서 new를 통해
          인스턴스를 생성하지 못하게 하고, 스스로 인스턴스를 하나 생성하여 제공하는 방식.
          인스턴스 생성 코스트를 줄일 수 있고, 메모리 낭비를 방지할 수 있으며
          하나의 인스턴스로 데이터를 공유할 수 있다.

        작성 요령>
        1. 생성자를 private로 작성.
        2. 인스턴스 저장 필드를 static으로 작성.
        3. 인스턴스를 제공하는 메소드를 static으로 작성.
        4. 인스턴스 제공 메소드에서 인스턴스가 없을 때 인스턴스를 생성하도록 처리.

File 처리(File Input/Output)
