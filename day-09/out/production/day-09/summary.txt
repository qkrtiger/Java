
내부 클래스와 익명 클래스 with GUI
    내부 클래스(Inner Class)
        한 클래스 내부에 작성하는 클래스
        class OuterClass {
            멤버들;
            public class InnerClass {
                클래스 문장...;
                바깥필드 = 데이터;
            }
        }

        내부 클래스에서 외부클래스의 모든 멤버의 접근이 용이하여
        마음껏 활용할 수 있는 클래스를 작성할 수 있다.
        (일종의 전용 부품 클래스를 내부에 작성하는 것)

익명 클래스(이름 없는 클래스)
    모든 인스턴스는 클래스가 있어야 생성할 수 있다!
    인터페이스로 새로운 클래스를 파생 시킬 때 클래스의 이름없이 바로 작성하여 인스턴스를 생성하는 방식.
    인스턴스 생성 문장에 직접 파상 클래스를 작성하는 것.
    GUI, 안드로이드 프로그래밍 등에서 이벤트 처리에 많이 사용됨
    추상 클래스, 인터페이스를 사용하여 인스턴스를 생성할 때 사용하는 방식.

예외처리(Exception Handling)
    예외(Exception)란?
    프로그램의 오류(Error)
    1) 컴파일 오류(문법 오류) - 코드를 작성할 때 발생하는 오류
    (컴파일이 안됨. 실행 불가)
    2) 런타임 오류(실행 오류) - 컴파일 완료 후 실행(Run-time) 시 발생하는 오류
    Bug(버그) - 실행은 되나 결과에 이상 발생.
    Exception(예외) - 비정상적인 종료.
        예외 사항 - 예방 코드로 수습 가능한 오류
    예외 처리란 예방 코드를 미리 작성하여 예외로 인한 비정상적인 종료를 막는 작업.

    예외 처리용 명령어
    1) try : 예외사항이 발생할 여지가 있는 코드를 묶어 놓은 영역
    2) catch : 발생된 예외사항에 대한 조치 명령을 작성하는 영역
    3) finally : 예외와 상관없이 처리해야할 명령으로 작성하는 영역
        처리해야할 명령이 없을 경우 생략 가능

    작성 문법)
    try {
        예외사항이 발생할 여지가 있는 문장들...
    } catch(예외사항클래스1 참조변수) {
        예외사항 조치를 위한 명령 문장들...(없을 수도 있음)
    } catch(예외사항클래스2 참조변수) {
        예외사항 조치를 위한 명령 문장들...(없을 수도 있음)
    } ... {
    }    ... { //또다른 예외사항들...
    } finally {
        예외와 관계없이 실행해야하는 명령 문장들...
    }
    1 try, many catch, 1 finally.

    Exception 클래스 : 모든 예외 사항 클래스의 부모 클래스.
        어떤 예외 사항이던 다 처리할 수 있는 클래스.
    자바는 객체지향이기 때문에 예외사항도 객체로 처리한다.
    주요 예외 사항들은 모두 클래스로 미리 정의되어 있음.
    1) NumberFormatException : 문자열을 숫자로 변환할 때 발생
    2) ArithmeticException : 산술연산시 발생
    3) NullPointException : 참조변수에 인스턴스가 없을 때 발생
    4) indexOutofBoundException : 배열의 크기와 관련하여 발생
    5) ClassNotFoundException : 인스턴스 생성에 필요한 클래스가 없을 때 발생
    6) IOException : 입출력에 문제가 있을 경우 발생(파일 IO)
    7) SQLException : DB 연동 관련하여 발생

    예외 처리 방식
    1. 예외가 발생되는 메소드 내에서 처리 완료하는 방식
    2. 예외 처리를 호출한 메소드에 위임(떠넘김)하는 방식
        메소드 선언부에 위임할 예외사항을 명시
        모든 예외사항을 넘길 경우 Exception을 작성.(throws)

        접근제어자 반환형 메소드이름(매개변수목록) throws 예외사항 클래스 {
            ...
        }
        예외사항클래스가 여러개일 경우 ','로 구분하여 나열.

    모든 예외사항은 Exception 클래스로 처리가 가능.
    catch문에 Exception만 작성해도 된다.

    예를 들어, 총 5가지의 예외사항이 발생되는 문장 블록이 있다고 가정할 때
    이중 2가지의 예외사항을 조치하기 위한 catch문을 작성하고, 나머지 3가지 예외사항은
    Exception 클래스로 처리할 수도 있음.

    Exception 클래스를 사용하는 catch문의 순서는 마지막이어야한다!(인텔리제이에서는 막아줌.)

    메소드로부터 값을 전달받는 방법
    1. return
    2. 멤버필드 활용
    3. 예외 객체의 메시지

    예외사항 처리를 활용한 메시지(문자열) 전송
        Exception 클래스를 상속받아 새로운 예외사항 객체를 만들 수 있는데,
        이 객체에 메시지를 담아서 던지면(throw) 메시지를 전달하는데 활용할 수 있다.
        throw 명령어 - 예외 인스턴스를 전송하는 명령어

Collection Framework(List, Set, Map)

File 처리

String과 그 외 주요 Utility Class

JDBC(Java + DB)