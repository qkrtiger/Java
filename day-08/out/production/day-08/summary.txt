    객체 지향 특성
    1. 캡슐화
    2. 상속
    3. 다형성
    4. 추상화 : 개념의 클래스화. 상속과 연관된 특성

    비접근 제어자 - static, final, abstract

    추상화(Abstract)
        알고는 있으나 정확하게 설명하기 어려운 것을 표현하는 것 -> 추상적 표현

    개념을 정의한 객체를 작성하는 것 -> 추상화
    -> 추상 클래스(Abstract Class)

    여러 객체에 공통적으로 사용하는 내용을 뽑아서 클래스화할 때(상속),
    처리해야하는 기능의 선언만 하고, 실제 기능의 정의는 상속받은 하위 클래스에서 작성하는 형태(오버라이딩)

    상위클래스(동물) - 동물은 소리를 낸다.
    하위클래스(강아지) - 강아지는 멍멍하고 소리를 낸다.(구체화)

    추상 클래스(Abstact Class)
        '미완성 설계도' - 인스턴스 생성 불가
        다른 실제 클래스를 작성하는데 도움을 주는 게 목적인 클래스

    추상 메소드(Abstract Method)
    자료형 앞에 abstract 제어자(키워드)를 붙이고 선언만 한 메소드.
    추상 메소드는 반드시 상속한 하위 클래스에서 재정의(override) 해야 한다.

    인터페이스(Interface)
        추상화 정도가 더 심한 클래스. 모든 메소드가 정의되지 않은 클래스.(모든 메소드가 추상 메소드)
        인스턴스를 생성할 수 없다.
        목적은 클래스 작성의 표준을 제시하는 것

        추상 메소드 + 상수(final 변수) = 인터페이스

        class라는 키워드를 사용하지 않고 interface를 사용.
        작성) interface 인터페이스명 { ... }

        작성법)
        1) class 대신 interface 사용
        2) 모든 메소드는 추상 메소드기 때문에 앞에 public abstract가 붙어야 한다.
        메소드 정의부는 정의하지 않는다.
        3) 모든 변수에는 public static final이 붙는다.
        4) public abstract, public static final은 생략할 수 있다.

    인터페이스를 상속받을 때는 extends가 아닌 implements 키워드를 사용한다.

    제어자의 대상
    1) 클래스 - 접근제어자, abstract, final
    2) 메소드 - 접근제어자, final, abstract, static
    3) 멤버변수 - 접근제어자, final, static
    4) 지역변수 - final

    제어자 조합 규칙
    1) 메소드에 static과 abstract를 함께 사용할 수 없다.
        static - 인스턴스 없이 사용 가능
        abstract - 정의부가 없음
    2) 클래스에 abstract와 final을 함께 사용할 수 없다.
        abstract - 반드시 상속을 해야 한다.
        final - 상속을 할 수 없다.
    3) abstract 메소드의 접근제어자에 private를 쓸 수 없다.
        private - 상속할 수 없는 멤버
        abstract - 상속하여 재정의 해야하는 메소드
    4) 메소드에 final과 private를 같이 사용할 필요는 없다.
        둘 다 상속불가. private 하나로 처리

    final 제어자.
    1) 클래스 앞에 붙으면 상속할 수 없는 클래스로 지정
    2) 메소드 앞에 붙으면 재정의(Override)할 수 없는 메소드로 지정

