배열
    다차원 배열
    2차원 배열 선언)
    자료형 배열명[][] = new 자료형[줄개수][칸개수];

    배열의 구조적 문제(크기 변경이 불가)
    -> ArrayList 객체를 활용.

    ArrayList
        배열 형태의 목록 객체. 크기 변경이 자유로움
        선언)
        ArrayList<자료형> 목록명 = new ArrayList<자료형>();

        - new 뒤에 나오는 자료형은 생략 가능.
        - 자료형은 Wrapper class로 작성.

        예) ArrayList<Integer> intArr = new ArrayList<>();

        관련 메소드 : ArrayList명.메소드();
        1) 삽입 : add(값); - 목록에 값을 추가
        2) 가져오기 : get(순번) - 목록의 순번 위치의 값 가져오기.
        3) 변경 : set(순번, 값) - 순번 위치의 값을 변경.
        4) 값 삭제 : remove(값|순번) - "값" 또는 순번에 해당하는 목록의 값 삭제
        5) 전체 삭제 : clear() - 모든 값 삭제
        6) 크기 : size() - 목록 값의 개수
        7) 위치 검색 : indexOf(값) - 값의 순번을 반환.
        8) 존재 유무 확인 : contains(값) - 있으면 true, 없으면 false.

        실습 문제) 학생들의 점수를 입력 받아서 총점과 평균을 구하는 프로그램을 작성하시오.
        조건)
            1. 프로그램의 골격을 활용하시오.
            메뉴) 1. 점수입력, 2. 점수출력, 3.총점, 4.평균, 0.종료
            2. ArrayList로 작성하시오.

메소드(Method)
    한가지 목적을 처리하기 위한 명령어 묶음(함수)
    객체 내에 위치하는 함수를 메소드라고 한다.
    4가지 유형) - 자바스크립트의 함수 유형과 동일.
    1) 파라미터(parameter), 반환값(return) 모두 사용.
    2) 반환값만 사용
    3) 파라미터만 사용
    4) 파라미터, 반환값 모두 사용하지 않음

    파라미터 - 인자, 인수. 메소드에 전달되는 값.

    문법)
    자료형 메소드명(파라미터목록) -> 선언부(Head)
    {
        명령문장;              -> 정의부(Body)
        [return] [결과값]
    }

    메소드 선언 시 사용하는 자료형은? 반환형
        즉, 결과값(반환값)의 자료형.

        반환값이 없을 때 반환형에 사용하는 키워드 : void

    static : 정적.(반대말 dynamic, 동적)
        자바에서 스태틱은 인스턴스없이 쓸 수 있다는 의미

        자바는 객체지향 언어기 때문에 모든 코드는 인스턴스화 되어야 사용 가능함

        프로그램 실행은 main을 포함하는 클래스도 인스턴스로 만들어져야 한다는 말임
        그런데....MainClass는 누가 인스턴스로 만드는가?????? 치킨 게임과 비슷
        닭이 있어야 달걀을 낳을 수 있는데, 닭은 달걀에서 나온 병아리가 커야 된다....는 문제
        스태틱은 아무것도 없는 세상에 닭을 만드는 방법을 제공한다.

메소드 구분
1) 스태틱 메소드 : static 키워드가 붙는 메소드(main) 인스턴스 없이 호출(사용) 가능.
2) 인스턴스 메소드 : 인스턴스가 생성되어야(new 사용) 존재하는 메소드. static 키워드가 안붙는 메소드

변수 용어 정리
1. 지역 변수 : 메소드 내부에 작성된 변수. 메소드 호출 시 생성되었다가, 메소드 종료시 제거된다. (다시 호출되면 새롭게 다시 생성된다.)
2. 매개 변수 : 메소드에서 파라미터를 받기 위한 지역 변수
3. (인스턴스) 참조 변수 : 인스턴스의 주소를 저장하는 변수(String)
4. 멤버 변수 : 클래스 내부, 메소드 외부에 작성하는 변수. 한 클래스의 모든 메소드에서 사용이 가능.(전역)
5. 인스턴스 (멤버)변수 : 멤버 변수이며, static이 붙지 않는 변수(인스턴스 생성 후부터 존재하는 변수)
6. 필드 : 인스턴스 변수를 지칭하는 다른 말
7. 스태틱 (멤버)변수 : 멤버 변수이며, static이 붙는 변수(인스턴스를 생성하지 않아도 존재하는 변수)
8. 클래스 변수 : 스태틱 변수를 지칭하는 다른 말
9. 전역변수 : 프로그램의 모든 영역에서 사용할 수 있는 변수.(자바에서는 전역 개념이 없음)

Method 영역에 생성되는 변수 : 스태틱(클래스) 변수, 참조변수.
Call Stack 영역에 생성되는 변수 : 지역(매개) 변수, 참조변수.
Heap 영역에 생성되는 변수 : 인스턴스 변수(필드), 참조변수.

객체 = 멤버변수 + 메소드

클래스의 종류
1) 정보 저장용 클래스 : 정보(데이터)를 저정하는 용도의 인스턴스 생성용 클래스
2) 부품(기능) 클래스 : 단독으로 사용은 어렵지만 객체의 일부로 사용하는 인스턴스 생성용 클래스
3) 제어 클래스 : 정보와 부품을 사용하여 문제를 해결하기 위한 프로그램 골격 인스턴스 생성용 클래스

자바(객체 지향 프로그래밍)는 전체 프로그램을 위와 같은 여러 클래스로 분할하여 작성하는 언어.
Why? 역할 분담을 통한 병렬 개발과 유지보수를 수월하게 하기 위해서.

웹 프로그래밍에서 사용하는 디자인 패턴(설계 유형)
MVC 패턴
Model - 데이터 처리를 위한 기능을 제공하는 부분
View - 화면 관련 처리 부분
Controller - 전체 프로그램 제어 부분

-> Controller, View, Service, Dto, Dao 패키지로 구분하여 class를 분배하여 프로그래밍

패키지(Package)
클래스의 묶음 단위. 프로그램에 필요한 클래스를 구분하여 작성 및 관리하는 단위

라이브러리는 패키지 단위로 구성되어 있음
예) import java.util.Scanner;(스캐너 사용 시)

import : 패키지를 활용한다는 명령어. (패키지를 포함시킨다.)
java.util. : 클래스가 위치한 경로(폴더) '대분류폴더', '소분류폴더'
Scanner : 사용할 클래스


