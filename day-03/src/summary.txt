제어문
1. 조건(분기) 제어문 : if, switch
    1) if
        기본형 : if(조건식) {...}
        2지 선다형 : if(조건식) {①...} else {②...}
            - 조건식이 true면 ①, false면 ②를 실행.
        다지 선다형 : if(조건식) {...}
                    else if(조건식) {...}
                    .....
                    else {...}

    2) switch
        case, default문과 조합
        형식 : switch(표현식) {
                case : ....
                표현식에 사용할 수 있는 것 : 정수, 문자(char), 문자열(String)

              }

2. 반복 제어문 : for(횟수 반복), while(그 외)
    for) 기본 형식 : for(초기식; 조건식; 증감식)
        forEach 형식 : for(변수 : 리스트)
            자바스크립트의 for of와 같은 형식.
            js에서) let arr = [10, 20, 30];
                for(let v1 of arr) {console.log(v1);}
                출력 => 10, 20, 30 (값)
                for(let v2 in arr) {console.log(v2);}
                출력 => 0,1,2 (순번)

    while) 기본 형식 : while(조건식) {...}
        do while 형식 : do {...} while(조건식);

3. 기타 제어문 : break, continue

실습) 콘솔 프로그램의 골격
    프로그램 실행 후 처음으로 타이틀 출력 > 메뉴 출력 > 메뉴 입력 > 해당 메뉴 실행  > 메뉴 출력 >
    메뉴 입력 > 해당 메뉴 실행 > 메뉴 출력
    메뉴 입력 > 해당 메뉴 실행 > 메뉴 출력
    ..........
    종료 메뉴 입력 > 종료.

    객체 지향의 개념을 포함하여 골격을 작성.
    -> 골격 객체를 만들어서 실행하는 형태

콘솔 출력 (교재 p67~70)
1) println(); - 괄호 안의 내용을 출력하고 줄을 바꿈
                괄호 안이 비어있으면 줄만 바꿈
2) print(""); - 괄호 안의 내용을 출력하고 줄을 바꾸지 않음.
               괄호 안이 비어있을 경우 오류
3) printf("출력형식", 수식1, 수식2, ...); - 출력형식에 맞게 수식 목록의 내용을 출력
    수식 : 변수, 리터럴 등
    출력형식에서 사용하는 기호 : %
        정수 : %d
        실수 : %f
        문자열 : %s.
        기타 : 이스케이프 문자들

참조(Reference) p.144~147
    자바 프로그램 실행 시 사용하는 메모리 영역의 구성.
    자바는 메모리 영역을 크게 Method 영역, Call Stack 영역, Heap 영역으로 분할하여 사용.
    Method 영역 : class를 배치하는 영역(설계도 책상)
        여기에 만들어지는 변수를 클래스(스태틱) 변수라고 함.
    Heap 영역 : 생성한 Instance(인스턴스)를 배치하는 영역
        인스턴스가 배치되고 동작하는 공간.
    Call Stack 영역 : 호출되는 메소드가 위치하는 영역
        기계어로 번역된 메소드(함수) 코드가 실행되는 영역
        여기에 만들어지는 변수를 지역(local) 변수라고 함

    null(널) : 참조 변수에 값(인스턴스의 주소)이 저장되지 않은 상태
        교재 p.149~p153.

        참조 변수에 주소가 저장되지 않은 인스턴스 : 쓰레기(Garbage)

        이런 쓰레기 인스턴스를 수정하는 장치 : Garbage Collector
        자바는 G.C를 자동으로 제공하지만, 일부 처리되지 않는 쓰레기도 있다.

    힙(Heap)

    스택(Stack)이란?
        자료구조(Data Struncture)의 하나로 일명 막힌 항아리 구조의 자료 공간
        밑에서부터 차곡차곡 쌓는 형태로 자료를 관리한다.
        비우려면 반드시 위에서부터 자료를 제거해야 한다.
        First In Last Out(LIFO)<또는 Last In First Out(FILO)> 후입선출

    배열(Array)
        변수 -> 배열 -> 객체
    동일한 자료형의 변수 묶음
    크기가 반드시 지정되어야 한다. 한번 크기가 정해지면 크기 변경이 불가!!!!
    배열을 선언(생성)할 때만 크기를 지정할 수 있음

    배열의 선언)
        자료형 배열명[] = new 자료형[크기]; <- 인스턴스로 만든다.(Heap 영역에 저장)
            => 크기만 지정하고 배열에 값을 넣지 않음.
            정수 : 0, 실수 : 0.0, 참조형 : null.(p.172)
        자료형 배열명[] = new 자료형[]{v1, v2, v3, ..., vn};
        자료형 배열명[] = {v1, v2, v3, ..., vn};
            => 선언과 값입력(초기화)를 동시에.
            입력(작성)된 값의 개수만큼 크기 지정.

    리스트(List) 구조 객체 - ArrayList
        배열의 구조적 한계(크기 변경 불가 등)로 활용율이 떨어짐.
        대신 ArrayList를 주로 활용.

        ArrayList는 크기가 가변적이기 때문에 효율적임