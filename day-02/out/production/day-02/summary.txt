인스턴스(Instance) - 실체화된 객체
    메모리 상에 생성된 class로 만든 객체

    객체 = 정보 + 기능(방법)
        = 변수 + 함수(메소드)

    클래스(class) : 객체를 만들기 위한 설계도

    프로그램은 인스턴스를 사용하여 만든다.
    자바의 라이브러리는 내가 설계하지 않지만 사용해야하는 class로 되어 있음
    즉. 설계도의 모음.(예:Scanner)
    완성된 프로그램 = 내가 작성한 코드(class)로 만든 인스턴스 + 라이브러리로 제공되는 class로 만든 인스턴스

    인스턴스를 만드는 방법(문법)
        설계도명(class명) 인스턴스이름 = new 설계도명(필요자원);
        예) Scanner scan = new Scanner(System.in);
    인스턴스 사용법
        인스턴스이름.인스턴스변수 = 값; //입력.
        인스턴스이름.인스턴스메소드(); //함수 호출.

    자바는 모든 것을 객체로 만들었다! (객체 지향 프로그래밍 언어)

    데이터 타입(자료형, Data Type)
        데이터의 크기 순서
        byte < short < int < long < float < double < String

        형변환(Type Casting) - 숫자형과 문자열형에서만 이루어짐.
            변수는 변하지 않는다. 단 변수에 저장된 값을 꺼내와서(복사) 새로운 자료형으로 변환하는 것을 형변환이라고 한다.
            규칙 1. 작은 자료형의 데이트를 큰 자료형의 데이터로 변환할 때는 자동으로 처리한다.(자동 형변환, 암시/묵시적 형변환)
            규칙 2. 큰 자료형의 데이터를 작은 자료형의 데이터로 변환할 때는 반드시 형변환 연산자를 사용한다. (강제 형변환, 명시적 형변환)

            형변환 연산자(Cast Operator) - '('와')' 사이에 형 지정.
            long a = 10000L;
            int b = (int) a;

    참고) 객체의 원자적인 형태
        변수(필드)와 변수에 값을 넣는 메소드(setter), 변수의 값을 가져오는(복사하는) 메소드(getter).
        물론 setter와 getter는 선택 사항임

    Wrapper Class(기본자료형을 객체로)
        자료형은 객체가 아님! 자바는 모든 것을 객체로. -> 자료형을 객체로 만들자. => Wrapper Class 탄생
        자료형에 대한 정의와 보조적으로 사용할 수 있는 기능 메소드를 묶어놓은 class.(기본 자료형 8개에 대해서만 존재)
        보조기능 예) 문자열을 숫자로 변환하는 기능 등.

        Type                        Wrapper class
        ----------------------------------------
        byte                        Byte
        short                       Short
        int                         Integer
        long                        Long
        float                       Float
        double                      Double
        char                        Character
        boolean                     Boolean

    권장 규칙) 클래스의 이름은 첫글자를 대문자로 한다.
    String : 문자열을 처리하는 규칙과 보조 기능 메소드로 구성된 class.
    형변환 제외 : boolean 타입

    숫자문자열 -> 숫자 타입. 숫자 -> 문자열
    각 class에서 변환용 메소드를 제공.
    숫자 -> 문자열 : String 클래스에 valueOf 메소드로 제공.
        "" + 숫자 -> 문자열로 자동 형변환.
    숫자문자열 -> 숫자 : 각 Wrapper에 parseXXX 메소드 제공.
        "1234" -> Integer.parseInt();
        => 정수 1234로 변환.
        "3.14" -> Float.parseFloat("3.14");
        => 실수 3.14로 변환.

프로그래밍 언어 학습 순서
    1. 변수(자료형) > 2. 연산자 > 3. 제어문 > 4. 객체지향 관련

연산자(Operator)
    프로그램의 명령어는 변수와 연산자로 구성된다.
    1) 산술연산자 : +, -, *, /, %
        5 / 2 = 2.5 <- 자바스크립트
        5 / 2 = 2 <- 자바 (정수연산은 정수로만 취급)
        정수 연산의 결과는 무조건 정수임.(나눗셈의 경우 몫만 취함)
        실수 연산시 % 연산자는 사용하지 않음
        한가지 자료형으로 연산이 수행될 경우 형이 변하는 경우는 없다.
        오버플로어(Overflow)와 언더플로어(Underflow) - p.83

    2) 대입연산자 : =, +=, -=, *=, /=, %=
        x + 1; -> x = x+1;

    3) 증감연산자 : ++, -- (자바스크림트와 동일)
        x++; -> x = x+1;

    4) 비교연산자 : ==, !=, >, >=, <, <= (자바스크립트와 동일. ===, !== 없음)
        문자열 비교는 equals 메소드를 사용.
        문자열1.equals(문자열2); -> true/false
        String s1 = "abcd";
        String s2 = "abcd";
        s1.equals("abcd");
        "abcd".equals(s1);
        s1.equals(s2);
        s2.equals(s1);

    5) 논리연산자 : &&, ||, !(Not), ^(XOR.배타적 논리합) 자바스크립트와 동일.
        비교 연산자로 작성된 연산식을 결합할 때 사용.
        논리곱 : &&. 두 연산식이 모두 TRUE일 때만 전체가 TRUE.
        논리합 : ||. 두 연산식이 모두 FALSE일 때만 전체가 FALSE.

    6) 조건연산자 : (condition) ? A : B;
        자바스크립트와 동일

    7) 비트연산자 : 비트 단위 논리연산자 - &, |, ^, !
    비트 단위 이동 연산자(shift) - <<, >>, >>>
        << : (* 2)와 같은 효과가 나오는 연산자
        >> : (/ 2)와 같은 효과가 나오는 연산자
        >>> : 첫번째 비트의 값이 0이면 이동 후 0을 채우고, 1이면 이동 후 1을 채움



















