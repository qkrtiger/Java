객체 지향 프로그래밍(Object Oriented Programming. OOP)
    기능을 제공하는 명령어들을 묶어서(객체화) 작성하고
    다른 명령어 묶음과 연계하여 구현하는 프로그래밍 방식.

    객체 = 정보 + 기능
        = 필드(멤버변수) + 메소드

객체 지향의 특성
1. 캡슐화(Encapsulation)
  필드와 메소드를 하나로 묶고 실제 구현 내용을 숨김
  => class를 만드는 작업.
  정보 은닉(Information Hiding)
  접근 제어자를 사용하여 객체 내부의 정보를 숨김.
2. 상속(Inheritance)
  부모의 특성을 그대로 물려 받고 새로운 것을 추가하는 것.
  => 부모클래스와 자식클래스 형태로 구현.
  코드 재사용성을 높이고, 버전 호환을 제공하며,
  유지보수 수월함을 제공.
3. 다형성(Polymorphism)
  같은 이름이지만 모양이 다른 것. 사용방법은 동일하지만
  실행 결과가 다르게 나오게 구현하는 것.
  대표 이름 개념.
4. 추상화(Abstraction)
  개념을 정의하는 것.
  대략적인 상태를 정의하고, 실체로서 구현하는 방법.
  예) 동물은 소리를 낸다. <- 어떻게 구현하겠는가?


객체
캡슐화 - 클래스를 작성하는 것.

클래스의 종류
1. 정보 클래스
2. 부품 클래스
3. 제어 클래스

정보 클래스 - DTO(Data Transfer Object), VO(Value Object)
1) 필드(멤버변수) - 정보 저장을 위한 공간
2) Setter 메소드 - 필드에 값을 저장하기 위한 기능
3) Getter 메소드 - 필드의 값을 가져오기 위한 기능

웹 사이트 구축에 필요한 기본적인 사항 - 회원 정보.
회원 정보에 필요한 인적 사항을 도출해보자.
- 이름, Id, 비밀번호, 주소, 연락처, 나이 -> private

상품 정보, 좌석 예매 시스템 정보 -> DB 테이블로 만들었던
정보들을 기준으로 DTO 클래스를 만드는 연습.

클래스의 멤버변수(필드)의 초기화는 자동으로 처리된다.
0에 해당하는 값으로 자동 초기화.
정수형(byte, short, int, long) - 0
문자형(char) - \u0000 -> 0
실수형(float, double) - 0.0
참조형(String, 그 외 모든 인스턴스 저장 변수) - null

- setter 메소드 작성 규칙
public void set+필드명(필드와 같은 타입의 매개변수){
    필드 = 매개변수;
}

- getter 메소드 작성 규칙
public 필드의타입 get+필드명(){
    return 필드;
}
(메소드 이름은 카멜케이스로 작성, 필드명의 첫글자를 대문자로.)

접근 제어자.
  정보 은닉 및 객체 보호를 위한 제어자.
  1) public - 공공의. 공개. 제한 없음. 주로 메소드에 붙임.
  2) default - 접근제어자를 작성하지 않으면 default.
               같은 패키지의 다른 객체에서는 접근 가능.
  3) protected - 같은 패키지, 다른 패키지여도 상속한
                객체에서는 접근 가능
  4) private - 비공개. 인스턴스 내부에서만 사용.

접근 범위
  public > protected > default > private

접근 제어자 사용 위치
1) 클래스 앞(보통 private는 붙이지 않는다.)
2) 멤버변수(필드) 앞
3) 메소드 앞
※ 지역변수 앞에는 붙이지 않는다.

멤버변수 앞에는 private.(필드는 보호)
메소드 앞에는 public.

MVC 패턴
Model - dto, service, dao
View - Scanner, print
Controller - 제어

작업 프로세스
Controller -> View(출력) -> View(입력) -> Controller
-> Model -> Controller -> View(출력) -> Controller
